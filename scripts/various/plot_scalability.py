
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from matplotlib.ticker import FuncFormatter
import math
###### Save times ######
# list_256 = [38.59761190414429,37.844971895217896,37.59815216064453,37.6522331237793,37.60393476486206,
#             37.58712458610535,37.701122999191284,37.68010354042053,37.98957633972168,37.710187911987305]

# list_64 = [2.2855284214019775, 2.245969772338867, 0.5255024433135986, 0.5179293155670166, 0.7746152877807617, 0.7830061912536621, 2.576740264892578, 2.5970940589904785, 1.9127850532531738, 1.9134125709533691]
# avg_all_64 =  1.6132583379745484 s
# avg_64 = 0.08962546322080825 s
# list_128 = [9.807166576385498, 9.32327151298523, 2.062228202819824, 1.9949331283569336, 3.1584649085998535, 3.1803598403930664, 11.201108694076538, 11.53169322013855, 7.914302587509155, 8.593668222427368]
# avg_all_128 =  6.876719689369201 s
# avg_128 = 0.38203998274273343 s
# list_256 = [38.395681381225586, 37.64828562736511, 6.560179710388184, 6.545897483825684, 11.486464977264404, 11.484886884689331, 44.283506631851196, 45.04706335067749, 30.360028505325317, 32.112184286117554]
# avg_all_256 =  26.392417883872987 s
# avg_256 = 1.4662454379929437 s
# list_512 = [157.29361772537231, 154.98153257369995, 22.674581289291382, 22.59432029724121, 46.34591794013977, 44.944191217422485, 174.7486491203308, 173.50214529037476, 124.32524681091309, 125.50176858901978]
# avg_all_512 =  104.69119708538055 s
# avg_512 =  5.816177615854475 s
# list_1024 = [622.9269869327545, 616.7375133037567, 82.14757990837097, 81.41052293777466, 177.82565236091614, 178.3453950881958, 689.0156915187836, 691.5291917324066, 506.4404728412628, 502.94163823127747]
# avg_all_1024 =  414.9320644855499 s
# avg_1024 =  23.05178136030833 s
# list_2048 = [2511.141668319702, 2484.219484567642, 315.1444809436798, 315.36807346343994, 738.645898103714, 738.1393547058105, 2848.1005952358246, 2847.8298003673553, 2042.226182937622, 2042.0088675022125]
# avg_all_2048 =  1688.2824406147004 s
# avg_2048 =  93.79346892303892 s

##### Detailled analysis #####
list_64 = [2.2855284214019775, 2.245969772338867, 0.5255024433135986, 0.5179293155670166, 0.7746152877807617, 0.7830061912536621, 2.576740264892578, 2.5970940589904785, 1.9127850532531738, 1.9134125709533691]
list_128 = [9.807166576385498, 9.32327151298523, 2.062228202819824, 1.9949331283569336, 3.1584649085998535, 3.1803598403930664, 11.201108694076538, 11.53169322013855, 7.914302587509155, 8.593668222427368]
list_256 = [38.395681381225586, 37.64828562736511, 6.560179710388184, 6.545897483825684, 11.486464977264404, 11.484886884689331, 44.283506631851196, 45.04706335067749, 30.360028505325317, 32.112184286117554]
list_512 = [157.29361772537231, 154.98153257369995, 22.674581289291382, 22.59432029724121, 46.34591794013977, 44.944191217422485, 174.7486491203308, 173.50214529037476, 124.32524681091309, 125.50176858901978]
list_1024 = [622.9269869327545, 616.7375133037567, 82.14757990837097, 81.41052293777466, 177.82565236091614, 178.3453950881958, 689.0156915187836, 691.5291917324066, 506.4404728412628, 502.94163823127747]
list_2048 = [2511.141668319702, 2484.219484567642, 315.1444809436798, 315.36807346343994, 738.645898103714, 738.1393547058105, 2848.1005952358246, 2847.8298003673553, 2042.226182937622, 2042.0088675022125]
list = [list_64, list_128, list_256, list_512, list_1024, list_2048]

distances = []
starts = [(752, 105), (493, 606), (352, 779), (29,33), (336, 331)]
goals = [(77, 645), (284, 401), (679, 491), (750, 812), (781, 793)]
for start, goal in zip(starts, goals):
    x1, y1 = start
    x2, y2 = goal
    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
    distances.append(distance)

for j in range(len(distances)):
    print('Path '+str(j+1)+' (distance = unit['+str(distances[j])+']{m}): ')
    for i in list:
        print(np.average(i[2*j:2*j+2])/18)


##### Curve fitting #####
avg = np.array([0.08962546322080825, 0.38203998274273343, 1.4662454379929437,
                5.816177615854475, 23.05178136030833, 93.79346892303892])
#x = np.array([64, 128, 256, 512, 1024, 2048])
x = np.array([64**2, 128**2, 256**2, 512**2, 1024**2, 2048**2])

def custom_curve(x, a, b, c):
    #return a * x**2 + b * x + c
    return b * x + c


def scientific_formatter(x, pos):
    return "{:.0e}".format(x)

# Fit the curve using curve_fit
params, covariance = curve_fit(custom_curve, x, avg)

# Plot the data and the fitted curve
print(params)
x_fit = np.linspace(1, np.max(x), 10)
y_fit = custom_curve(x_fit, *params)

fig, ax = plt.subplots()
plt.scatter(x, avg, label='Data')
plt.plot(x_fit, y_fit, label='Fitted Curve', color='red')

# Change design of plot
ax.tick_params(axis='both', which='major', labelsize=20)
legend = ax.legend(fontsize=20)
ax.set_xlabel('Width of quadratic image [pixel]', fontsize=20)
#ax.set_xlabel('Total number of pixels', fontsize=20)
#ax.xaxis.set_major_formatter(FuncFormatter(scientific_formatter))
ax.set_ylabel('Average time to calculate path [s]', fontsize=20)
plt.show()
